// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cache/order/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	order "wb_test_1/internal/models/order"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheRepositoryWorker is a mock of CacheRepositoryWorker interface.
type MockCacheRepositoryWorker struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryWorkerMockRecorder
}

// MockCacheRepositoryWorkerMockRecorder is the mock recorder for MockCacheRepositoryWorker.
type MockCacheRepositoryWorkerMockRecorder struct {
	mock *MockCacheRepositoryWorker
}

// NewMockCacheRepositoryWorker creates a new mock instance.
func NewMockCacheRepositoryWorker(ctrl *gomock.Controller) *MockCacheRepositoryWorker {
	mock := &MockCacheRepositoryWorker{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepositoryWorker) EXPECT() *MockCacheRepositoryWorkerMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockCacheRepositoryWorker) GetById(arg0 string) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCacheRepositoryWorkerMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCacheRepositoryWorker)(nil).GetById), arg0)
}

// GetIdsList mocks base method.
func (m *MockCacheRepositoryWorker) GetIdsList() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdsList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetIdsList indicates an expected call of GetIdsList.
func (mr *MockCacheRepositoryWorkerMockRecorder) GetIdsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdsList", reflect.TypeOf((*MockCacheRepositoryWorker)(nil).GetIdsList))
}

// Insert mocks base method.
func (m *MockCacheRepositoryWorker) Insert(arg0 string, arg1 order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockCacheRepositoryWorkerMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCacheRepositoryWorker)(nil).Insert), arg0, arg1)
}
